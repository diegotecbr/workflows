name: Matrix Workflow Example

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite execução manual

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Gerar matriz JSON
        id: set-matrix
        run: echo 'matrix={"include":[{"name":"Sucesso","value":1},{"name":"Erro","value":2}]}' >> $GITHUB_OUTPUT

  use-matrix:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Executando job da matriz
        run: |
          echo "Rodando ${{ matrix.name }} com valor ${{ matrix.value }}"
          if [ "${{ matrix.value }}" -eq 2 ]; then
            echo "Simulando erro..."
            exit 1
          fi

  filter-success:
    needs: use-matrix
    runs-on: ubuntu-latest
    if: always()  # Garante que este job rode mesmo que "use-matrix" tenha falhas
    outputs:
      success_matrix: ${{ steps.filter.outputs.success_matrix }}
    steps:
      - name: Filtrar apenas os jobs que tiveram sucesso
        id: filter
        run: |
          MATRIX='${{ needs.generate-matrix.outputs.matrix }}'
          SUCCESS_MATRIX=$(echo "$MATRIX" | jq -c '{"include": [ .include[] | select(.value != 2) ]}')
          echo "success_matrix=$SUCCESS_MATRIX" >> $GITHUB_OUTPUT

  final-step:
    needs: filter-success
    runs-on: ubuntu-latest
    if: ${{ needs.filter-success.outputs.success_matrix != '{"include":[]}' }}  # Só executa se houver itens na matriz filtrada
    strategy:
      matrix: ${{ fromJson(needs.filter-success.outputs.success_matrix) }}
    steps:
      - name: Passo final usando a matriz
        run: echo "Finalizando ${{ matrix.name }} com valor ${{ matrix.value }}"
